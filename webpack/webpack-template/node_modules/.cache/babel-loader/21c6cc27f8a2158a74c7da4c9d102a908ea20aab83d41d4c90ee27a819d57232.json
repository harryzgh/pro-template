{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.promise.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\n// import \"core-js\"\n// import \"core-js/es/promise\"\nimport { sum } from \"./js/sum\";\n// 引入 Css 资源，Webpack才会对其打包\nimport \"./css/index.css\";\nconsole.log(\"hello main\");\nconsole.log(sum(1, 2, 3, 4, 5));\nvar obj = {\n  useBuiltIns: \"usage\",\n  corejs: {\n    version: \"3\",\n    proposals: true\n  }\n};\nconsole.log(sum(1, 2, 3, 4));\nconsole.log('tes++++---9990(())(0ssss', obj);\nconsole.log('so da:', [1, 2, 3, 4].includes(1));\n\n// 添加promise代码\nvar promise = Promise.resolve();\npromise.then(function () {\n  console.log(\"hello promise\");\n});\nconsole.log('test+++++23');\ndocument.getElementById(\"btn\").addEventListener('click', function () {\n  // eslint会对动态导入语法报错，需要修改eslint配置文件\n  // webpackChunkName: \"count\"：这是webpack动态导入模块命名的方式\n  // \"count\"将来就会作为[name]的值显示。\n  import( /* webpackChunkName: \"count\" */\"./js/count.js\").then(function (modul) {\n    console.log('test+++++829129000', modul);\n    console.log('test+++++829129', modul[\"default\"](10, 1));\n  });\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}